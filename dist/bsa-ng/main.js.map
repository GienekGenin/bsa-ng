{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.scss","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/forget-pass/captcha/captcha.component.html","webpack:///./src/app/forget-pass/captcha/captcha.component.scss","webpack:///./src/app/forget-pass/captcha/captcha.component.ts","webpack:///./src/app/forget-pass/forgot-pass.component.html","webpack:///./src/app/forget-pass/forgot-pass.component.scss","webpack:///./src/app/forget-pass/forgot-pass.component.ts","webpack:///./src/app/forget-pass/new-pass/new-pass.component.html","webpack:///./src/app/forget-pass/new-pass/new-pass.component.scss","webpack:///./src/app/forget-pass/new-pass/new-pass.component.ts","webpack:///./src/app/guards/dashboard/dashboard.guard.ts","webpack:///./src/app/guards/forms/forms.guard.ts","webpack:///./src/app/guards/new-pass-guard/new-pass.guard.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/registration/registration.component.html","webpack:///./src/app/registration/registration.component.scss","webpack:///./src/app/registration/registration.component.ts","webpack:///./src/app/services/date-picker-service/date-picker.service.ts","webpack:///./src/app/services/user-service/user.service.ts","webpack:///./src/app/services/validation/form-validation.service.ts","webpack:///./src/app/timer-module/timer.module.ts","webpack:///./src/app/timer-module/timer/timer.component.html","webpack:///./src/app/timer-module/timer/timer.component.scss","webpack:///./src/app/timer-module/timer/timer.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ForgotPassComponent} from './forget-pass/forgot-pass.component';\nimport {LoginComponent} from './login/login.component';\nimport {RegistrationComponent} from './registration/registration.component';\nimport {DashboardComponent} from './dashboard/dashboard.component';\nimport {NewPassComponent} from './forget-pass/new-pass/new-pass.component';\nimport {CaptchaComponent} from './forget-pass/captcha/captcha.component';\nimport {NewPassGuard} from './guards/new-pass-guard/new-pass.guard';\nimport {DashboardGuard} from './guards/dashboard/dashboard.guard';\nimport {FormsGuard} from './guards/forms/forms.guard';\n\nconst routes: Routes = [\n  {path: '', pathMatch: 'full', redirectTo: 'login'},\n  {path: 'dashboard', component: DashboardComponent, canActivate: [DashboardGuard]},\n  {\n    path: 'forget-pass',\n    component: ForgotPassComponent,\n    canActivate: [FormsGuard],\n    children: [\n      {path: '', component: CaptchaComponent},\n      {path: 'new-pass', component: NewPassComponent, canActivate: [NewPassGuard]}],\n  },\n  {path: 'login', component: LoginComponent, canActivate: [FormsGuard]},\n  {path: 'registration', component: RegistrationComponent, canActivate: [FormsGuard]}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"\"","import {Component, OnInit} from '@angular/core';\nimport {UserService} from './services/user-service/user.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'app';\n\n  constructor(public userService: UserService) {\n  }\n\n  ngOnInit() {\n    this.userService.setDefaultUsers();\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {RegistrationComponent} from './registration/registration.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {ForgotPassComponent} from './forget-pass/forgot-pass.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MaterialModule} from './material.module';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\nimport {DatePickerService} from './services/date-picker-service/date-picker.service';\r\nimport {RecaptchaModule} from 'ng-recaptcha';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { NewPassComponent } from './forget-pass/new-pass/new-pass.component';\r\nimport { CaptchaComponent } from './forget-pass/captcha/captcha.component';\r\nimport {FormValidationService} from './services/validation/form-validation.service';\r\nimport {NewPassGuard} from './guards/new-pass-guard/new-pass.guard';\r\nimport {UserService} from './services/user-service/user.service';\r\nimport {FormsGuard} from './guards/forms/forms.guard';\r\nimport {DashboardGuard} from './guards/dashboard/dashboard.guard';\r\nimport {TimerModule} from './timer-module/timer.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent,\r\n    LoginComponent,\r\n    ForgotPassComponent,\r\n    DashboardComponent,\r\n    NewPassComponent,\r\n    CaptchaComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RecaptchaModule.forRoot(),\r\n    TimerModule\r\n  ],\r\n  providers: [DatePickerService, FormValidationService, NewPassGuard, UserService, FormsGuard, DashboardGuard],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","module.exports = \"<mat-tab-group color=\\\"accent\\\">\\r\\n  <mat-tab label=\\\"Menu\\\">\\r\\n    <button mat-button [matMenuTriggerFor]=\\\"menu1\\\">Items</button>\\r\\n    <mat-menu #menu1=\\\"matMenu\\\">\\r\\n      <button mat-menu-item>Item 1</button>\\r\\n      <button mat-menu-item>Item 2</button>\\r\\n    </mat-menu>\\r\\n\\r\\n    <button mat-button [matMenuTriggerFor]=\\\"menu2\\\">Items</button>\\r\\n    <mat-menu #menu2=\\\"matMenu\\\">\\r\\n      <button mat-menu-item>Item 1</button>\\r\\n      <button mat-menu-item>Item 2</button>\\r\\n    </mat-menu>\\r\\n\\r\\n    <button mat-button [matMenuTriggerFor]=\\\"menu3\\\">Items</button>\\r\\n    <mat-menu #menu3=\\\"matMenu\\\">\\r\\n      <button mat-menu-item>Item 1</button>\\r\\n      <button mat-menu-item>Item 2</button>\\r\\n    </mat-menu>\\r\\n  </mat-tab>\\r\\n  <mat-tab label=\\\"Logout\\\">\\r\\n    <button mat-stroked-button color=\\\"warn\\\" (click)=\\\"logout()\\\">Confirm</button>\\r\\n  </mat-tab>\\r\\n  <mat-tab label=\\\"Item\\\">\\r\\n    <button mat-button>Item</button>\\r\\n    <button mat-button>Item</button>\\r\\n  </mat-tab>\\r\\n  <mat-tab label=\\\"Item\\\">\\r\\n    <button mat-button>Item</button>\\r\\n    <button mat-button>Item</button>\\r\\n    <button mat-button>Item</button>\\r\\n  </mat-tab>\\r\\n</mat-tab-group>\\r\\n<div class=\\\"content\\\">\\r\\n  <mat-card class=\\\"card\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title><h3>User Profile</h3></mat-card-title>\\r\\n      <mat-card-subtitle><h4>Your info</h4></mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <table>\\r\\n        <tr>\\r\\n          <td>Name:</td>\\r\\n          <td>\\r\\n            <span *ngIf=\\\"!edit\\\">{{user.name}}</span>\\r\\n            <mat-form-field *ngIf=\\\"edit\\\">\\r\\n              <input matInput #name id=\\\"name\\\" [formControl]=\\\"text_field\\\" placeholder=\\\"Enter your name\\\" required>\\r\\n              <mat-icon matSuffix>mode_edit</mat-icon>\\r\\n              <mat-error *ngIf=\\\"text_field.invalid\\\">{{getErrorMsg()}}</mat-error>\\r\\n            </mat-form-field>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Surname:</td>\\r\\n          <td>\\r\\n            <span *ngIf=\\\"!edit\\\">{{user.surname}}</span>\\r\\n            <mat-form-field *ngIf=\\\"edit\\\">\\r\\n              <input matInput #surname [formControl]=\\\"text_field1\\\" placeholder=\\\"Enter your surname\\\" required>\\r\\n              <mat-icon matSuffix>mode_edit</mat-icon>\\r\\n              <mat-error *ngIf=\\\"text_field1.invalid\\\">{{getErrorMsg()}}</mat-error>\\r\\n            </mat-form-field>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Date of birth:</td>\\r\\n          <td>{{user.date}}</td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Email:</td>\\r\\n          <td>{{user.email}}</td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-stroked-button (click)=\\\"edit=!edit\\\" *ngIf=\\\"!edit\\\">EDIT</button>\\r\\n      <button mat-stroked-button color=\\\"warn\\\" (click)=\\\"edit=!edit\\\" *ngIf=\\\"edit\\\">CANCEL</button>\\r\\n      <button mat-raised-button color=\\\"accent\\\" (click)=\\\"saveProfileChanges(text_field.value, text_field1.value)\\\" *ngIf=\\\"edit\\\">SAVE</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n  <app-timer></app-timer>\\r\\n</div>\\r\\n<div class=\\\"table\\\">\\r\\n  <mat-form-field>\\r\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n  </mat-form-field>\\r\\n  <div class=\\\"mat-elevation-z8\\\">\\r\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n      <!-- ID Column -->\\r\\n      <ng-container matColumnDef=\\\"id\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Name Column -->\\r\\n      <ng-container matColumnDef=\\\"name\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.name}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Surname Column -->\\r\\n      <ng-container matColumnDef=\\\"surname\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.surname}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Email Column -->\\r\\n      <ng-container matColumnDef=\\\"email\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Email</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.email}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Date Column -->\\r\\n      <ng-container matColumnDef=\\\"date\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Date</th>\\r\\n        <td mat-cell *matCellDef=\\\"let row\\\"> {{row.date}}</td>\\r\\n      </ng-container>\\r\\n\\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n      </tr>\\r\\n    </table>\\r\\n\\r\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n  </div>\\r\\n</div>\\r\\n<mat-toolbar color=\\\"accent\\\">\\r\\n  <mat-toolbar-row>\\r\\n    <span>Copyright © 2018 NukeMyHome Technologies</span>\\r\\n  </mat-toolbar-row>\\r\\n</mat-toolbar>\\r\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\nth.mat-sort-header-sorted {\\n  color: black; }\\n\\n.card {\\n  max-width: 300px;\\n  margin-top: 10px;\\n  margin-bottom: 10px; }\\n\\n.content {\\n  display: flex;\\n  justify-content: space-around; }\\n\\n.table {\\n  margin-left: 10px;\\n  margin-right: 10px; }\\n\\nfooter {\\n  height: 50px;\\n  background-color: whitesmoke;\\n  color: white;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center; }\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\nimport {UserService} from '../services/user-service/user.service';\nimport {FormControl} from '@angular/forms';\nimport {FormValidationService} from '../services/validation/form-validation.service';\nimport {Router} from '@angular/router';\n\nexport interface UserData {\n  id: string;\n  name: string;\n  surname: string;\n  email: string;\n  date: string;\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  edit = false;\n  user: {\n    id: number,\n    name: string,\n    surname: string,\n    email: string,\n    date: string\n  };\n  text_field: FormControl;\n  text_field1: FormControl;\n  getErrorMsg: Function;\n  displayedColumns: string[] = ['id', 'name', 'surname', 'email', 'date'];\n  dataSource: MatTableDataSource<UserData>;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(public userService: UserService, public formValidation: FormValidationService, public router: Router) {\n    // из-а того что ведут себя как будто связаны по ссылке\n    this.text_field = formValidation.text_field;\n    this.text_field1 = formValidation._text_field;\n    this.getErrorMsg = formValidation.getEmptyFieldErrorMessage;\n    this.user = userService.getUserLoggedIn();\n    const users = JSON.parse(localStorage.getItem('users'));\n\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(users);\n  }\n\n  ngOnInit() {\n    this.user = JSON.parse(localStorage.getItem('last_user'));\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  saveProfileChanges(name, surname) {\n    if (name && surname) {\n      this.edit = !this.edit;\n      this.user.name = name;\n      this.user.surname = surname;\n      localStorage.setItem('last_user', JSON.stringify(this.user));\n    } else {\n      alert('Provide values or cancel');\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  logout() {\n    const guard = {\n      'dashboard': false,\n      'forms': true,\n      'new-pass': false\n    };\n    localStorage.setItem('guard', JSON.stringify(guard));\n    this.router.navigate(['login']);\n  }\n}\n","module.exports = \"<mat-card class=\\\"card\\\">\\n  <mat-card-header>\\n    <mat-card-title><h3>Are you sure you are not robot?</h3></mat-card-title>\\n    <mat-card-subtitle><h4>If you pass, you will know for sure</h4></mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-content>\\n      <img src=\\\"../../assets/captcha.gif\\\" alt=\\\"captcha\\\">\\n      <mat-form-field class=\\\"field-full-width\\\">\\n        <input matInput placeholder=\\\"Enter captcha text\\\" required (keyup)=\\\"checkCaptcha($event)\\\">\\n      </mat-form-field>\\n  </mat-card-content>\\n</mat-card>\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Encode+Sans+Condensed);\\n@import url(https://fonts.googleapis.com/css?family=Roboto);\\na, li, span, button, td {\\n  font-family: 'Encode Sans Condensed', sans-serif !important; }\\nh1, h2, h3, h4, h5, h6, .mat-card-title, .mat-card-subtitle, .mat-tab-label-content, .mat-sort-header-button {\\n  font-family: 'Roboto', sans-serif !important; }\\ntd, th {\\n  font-size: 16px !important; }\\nform {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n.field-full-width {\\n  width: 100%; }\\n\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {NewPassGuard} from '../../guards/new-pass-guard/new-pass.guard';\n\n@Component({\n  selector: 'app-captcha',\n  templateUrl: './captcha.component.html',\n  styleUrls: ['./captcha.component.scss']\n})\nexport class CaptchaComponent implements OnInit {\n\n  constructor(public router: Router, public newPassGuard: NewPassGuard) {\n  }\n\n  checkCaptcha(event) {\n    if (event.target.value === `don't type`) {\n      const guard = {\n        'dashboard': false,\n        'forms': true,\n        'new_pass': true\n      };\n      localStorage.setItem('guard', JSON.stringify(guard));\n      this.router.navigate(['forget-pass/new-pass']);\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Encode+Sans+Condensed);\\n@import url(https://fonts.googleapis.com/css?family=Roboto);\\na, li, span, button, td {\\n  font-family: 'Encode Sans Condensed', sans-serif !important; }\\nh1, h2, h3, h4, h5, h6, .mat-card-title, .mat-card-subtitle, .mat-tab-label-content, .mat-sort-header-button {\\n  font-family: 'Roboto', sans-serif !important; }\\ntd, th {\\n  font-size: 16px !important; }\\nform {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n.field-full-width {\\n  width: 100%; }\\n\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-forget-pass',\n  templateUrl: './forgot-pass.component.html',\n  styleUrls: ['./forgot-pass.component.scss']\n})\nexport class ForgotPassComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"card\\\">\\n  <mat-card-header>\\n    <mat-card-title><h3>Password reset</h3></mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <mat-form-field class=\\\"field-full-width\\\">\\n      <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\n      <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"field-full-width\\\" hintLabel=\\\"Min 3 characters\\\">\\n      <input matInput #password minlength=\\\"3\\\" placeholder=\\\"Enter your password\\\" [type]=\\\"hidePass ? 'password' : 'text'\\\" required>\\n      <mat-hint align=\\\"end\\\">{{password.value?.length || 0}}/3</mat-hint>\\n      <mat-icon matSuffix (click)=\\\"hidePass = !hidePass\\\">{{hidePass ? 'visibility' : 'visibility_off'}}</mat-icon>\\n    </mat-form-field>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-stroked-button color=\\\"warn\\\" *ngIf=\\\"!email.invalid && password.value?.length >=3\\\" (click)=\\\"changePass(email, password.value)\\\">Submit</button>\\n  </mat-card-actions>\\n</mat-card>\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Encode+Sans+Condensed);\\n@import url(https://fonts.googleapis.com/css?family=Roboto);\\na, li, span, button, td {\\n  font-family: 'Encode Sans Condensed', sans-serif !important; }\\nh1, h2, h3, h4, h5, h6, .mat-card-title, .mat-card-subtitle, .mat-tab-label-content, .mat-sort-header-button {\\n  font-family: 'Roboto', sans-serif !important; }\\ntd, th {\\n  font-size: 16px !important; }\\nform {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n.field-full-width {\\n  width: 100%; }\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {FormValidationService} from '../../services/validation/form-validation.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-child-forget-pass',\n  templateUrl: './new-pass.component.html',\n  styleUrls: ['./new-pass.component.scss']\n})\nexport class NewPassComponent implements OnInit {\n  email: FormControl;\n  getErrorMessage: Function;\n  hidePass = true;\n\n  constructor(public formValidation: FormValidationService, public router: Router) {\n    this.email = this.formValidation.email;\n    this.getErrorMessage = this.formValidation.getEmailErrorMessage;\n  }\n\n  ngOnInit() {\n  }\n\n  changePass(email, password) {\n    if (!email.invalid && password.length >= 3) {\n      const users = JSON.parse(localStorage.getItem('users'));\n      for (let i = 0; i < users.length; i++) {\n        if (users[i].email === email.value) {\n          users[i].password = password;\n          localStorage.setItem('users', JSON.stringify(users));\n          alert('Password changed');\n          const guard = {\n            'dashboard': false,\n            'forms': true,\n            'new_pass': false\n          };\n          localStorage.setItem('guard', JSON.stringify(guard));\n          this.router.navigate(['login']);\n        }\n      }\n    } else {\n      alert('email or password incorrect');\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardGuard implements CanActivate {\n  state = false;\n\n  canActivate(next: ActivatedRouteSnapshot,\n              state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (JSON.parse(localStorage.getItem('guard')) !== null) {\n      this.state = JSON.parse(localStorage.getItem('guard')).dashboard;\n    }\n    if (this.state === false) {\n      this.router.navigate(['login']);\n    }\n    return this.state;\n  }\n\n  constructor(public router: Router) {\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormsGuard implements CanActivate {\n  state = true;\n\n  canActivate(next: ActivatedRouteSnapshot,\n              state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (JSON.parse(localStorage.getItem('guard')) !== null) {\n      this.state = JSON.parse(localStorage.getItem('guard')).forms;\n    }\n    if (this.state === false) {\n      this.router.navigate(['dashboard']);\n    }\n    return this.state;\n  }\n\n  constructor(public router: Router) {\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewPassGuard implements CanActivate {\n  state = false;\n  canActivate(route: ActivatedRouteSnapshot,\n              state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (JSON.parse(localStorage.getItem('guard')) !== null) {\n      this.state = JSON.parse(localStorage.getItem('guard')).new_pass;\n    }\n    if (this.state === false) {\n      this.router.navigate(['login']);\n    }\n    return this.state;\n  }\n  constructor(public router: Router) {\n  }\n}\n","module.exports = \"<mat-card class=\\\"card\\\">\\r\\n  <mat-card-header>\\r\\n    <mat-card-title><h1>Login</h1></mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <mat-form-field class=\\\"field-full-width\\\">\\r\\n      <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\r\\n      <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n    </mat-form-field>\\r\\n    <mat-form-field class=\\\"field-full-width\\\">\\r\\n      <input matInput #pass placeholder=\\\"Enter your password\\\" [type]=\\\"hidePass ? 'password' : 'text'\\\" required>\\r\\n      <mat-icon matSuffix (click)=\\\"hidePass = !hidePass\\\">{{hidePass ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n    </mat-form-field>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <mat-list role=\\\"list\\\">\\r\\n      <mat-list-item *ngIf=\\\"!email.invalid && pass.value\\\" role=\\\"listitem\\\"><button mat-stroked-button color=\\\"accent\\\" (click)=\\\"login(email.value, pass.value)\\\">Submit</button></mat-list-item>\\r\\n      <mat-list-item role=\\\"listitem\\\"><a routerLink=\\\"/forget-pass\\\"><button mat-stroked-button>Forget password</button></a></mat-list-item>\\r\\n      <mat-list-item role=\\\"listitem\\\"><a routerLink=\\\"/registration\\\"><button mat-stroked-button>Registration</button></a></mat-list-item>\\r\\n    </mat-list>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\\r\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Encode+Sans+Condensed);\\n@import url(https://fonts.googleapis.com/css?family=Roboto);\\na, li, span, button, td {\\n  font-family: 'Encode Sans Condensed', sans-serif !important; }\\nh1, h2, h3, h4, h5, h6, .mat-card-title, .mat-card-subtitle, .mat-tab-label-content, .mat-sort-header-button {\\n  font-family: 'Roboto', sans-serif !important; }\\ntd, th {\\n  font-size: 16px !important; }\\nform {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n.field-full-width {\\n  width: 100%; }\\n\"","import {Component, OnInit} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {FormValidationService} from '../services/validation/form-validation.service';\r\nimport {UserService} from '../services/user-service/user.service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  email: FormControl;\r\n  getErrorMessage: Function;\r\n  hidePass = true;\r\n\r\n  constructor(public formValidation: FormValidationService, public userService: UserService,\r\n              public router: Router) {\r\n    this.email = this.formValidation.email;\r\n    this.getErrorMessage = this.formValidation.getEmailErrorMessage;\r\n  }\r\n\r\n  ngOnInit() {\r\n    const guard = {\r\n      'dashboard': false,\r\n      'forms': true,\r\n      'new_pass': false\r\n    };\r\n    localStorage.setItem('guard', JSON.stringify(guard));\r\n  }\r\n\r\n  login(email, password) {\r\n    const users = JSON.parse(localStorage.getItem('users'));\r\n    for (let i = 0; i < users.length; i++) {\r\n      if (users[i].email === email && password === users[i].password) {\r\n        this.userService.setUserLoggedIn(users[i]);\r\n        localStorage.setItem('last_user', JSON.stringify(users[i]));\r\n        const guard = {\r\n          'dashboard': true,\r\n          'forms': false,\r\n          'new_pass': false\r\n        };\r\n        localStorage.setItem('guard', JSON.stringify(guard));\r\n        this.router.navigate(['dashboard']);\r\n        return;\r\n      }\r\n    }\r\n    alert('Email or password incorrect');\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatTableModule,\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatBottomSheetModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatMenuModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatTreeModule,\r\n} from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatTableModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ],\r\n  exports: [\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatTableModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n  ],\r\n})\r\nexport class MaterialModule {\r\n}\r\n","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title><h1>Registration</h1></mat-card-title>\\n    <mat-card-subtitle><h2>Welcome</h2></mat-card-subtitle>\\n  </mat-card-header>\\n<form action=\\\"#\\\">\\n  <mat-form-field hintLabel=\\\"Max 15 characters\\\" class=\\\"field-full-width\\\">\\n    <input matInput #name maxlength=\\\"15\\\" placeholder=\\\"Enter your Name\\\" required>\\n    <mat-hint align=\\\"end\\\">{{name.value?.length || 0}}/15</mat-hint>\\n  </mat-form-field>\\n  <mat-form-field hintLabel=\\\"Max 15 characters\\\" class=\\\"field-full-width\\\">\\n    <input matInput #surname maxlength=\\\"15\\\" placeholder=\\\"Enter your Surname\\\" required>\\n    <mat-hint align=\\\"end\\\">{{surname.value?.length || 0}}/15</mat-hint>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"field-full-width\\\">\\n    <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\n    <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"field-full-width\\\">\\n    <input matInput #date [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n    <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #picker></mat-datepicker>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"field-full-width\\\" hintLabel=\\\"Min 3 characters\\\">\\n    <input matInput #password minlength=\\\"3\\\" placeholder=\\\"Enter your password\\\" [type]=\\\"hidePass ? 'password' : 'text'\\\"\\n           required>\\n    <mat-hint align=\\\"end\\\">{{password.value?.length || 0}}/3</mat-hint>\\n    <mat-icon matSuffix (click)=\\\"hidePass = !hidePass\\\">{{hidePass ? 'visibility' : 'visibility_off'}}</mat-icon>\\n  </mat-form-field>\\n\\n</form>\\n  <mat-card-actions>\\n    <button mat-raised-button color=\\\"accent\\\" #submit (click)=\\\"userData(name.value,surname.value,email.value,date.value,password.value)\\\"\\n            *ngIf=\\\"!email.invalid && name.value.length > 0 && surname.value.length > 0 && date.value && password.value.length >=3\\\"\\n    >Submit\\n    </button>\\n  </mat-card-actions>\\n</mat-card>\\n\"","module.exports = \"@import url(https://fonts.googleapis.com/css?family=Encode+Sans+Condensed);\\n@import url(https://fonts.googleapis.com/css?family=Roboto);\\na, li, span, button, td {\\n  font-family: 'Encode Sans Condensed', sans-serif !important; }\\nh1, h2, h3, h4, h5, h6, .mat-card-title, .mat-card-subtitle, .mat-tab-label-content, .mat-sort-header-button {\\n  font-family: 'Roboto', sans-serif !important; }\\ntd, th {\\n  font-size: 16px !important; }\\nform {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%; }\\n.field-full-width {\\n  width: 100%; }\\n.mat-card {\\n  width: 500px;\\n  margin: auto;\\n  margin-top: 10px; }\\n\"","import {Component} from '@angular/core';\nimport {DatePickerService} from '../services/date-picker-service/date-picker.service';\nimport {FormValidationService} from '../services/validation/form-validation.service';\nimport {FormControl} from '@angular/forms';\nimport {UserService} from '../services/user-service/user.service';\nimport {DashboardGuard} from '../guards/dashboard/dashboard.guard';\nimport {Router} from '@angular/router';\n\ninterface RegistrationComponentInterface {\n  minDate: Date;\n  maxDate: Date;\n  email: FormControl;\n  getErrorMessage: Function;\n  userData: Function;\n  hidePass: boolean;\n}\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements RegistrationComponentInterface {\n  minDate: Date;\n  maxDate: Date;\n  email: FormControl;\n  getErrorMessage: Function;\n  hidePass = true;\n\n  constructor(public datePicker: DatePickerService, public formValidation: FormValidationService,\n              public userService: UserService, public dashboardGuard: DashboardGuard,\n              public router: Router) {\n    this.minDate = this.datePicker.minDate;\n    this.maxDate = this.datePicker.maxDate;\n    this.email = this.formValidation.email;\n    this.getErrorMessage = this.formValidation.getEmailErrorMessage;\n  }\n\n  userData(name, surname, email, date, password) {\n    const user = {name, surname, email, date, password, id: null};\n    this.userService.pushUserToLocalStorage(user);\n    this.dashboardGuard.state = true;\n    this.router.navigate(['dashboard']);\n  }\n}\n","import {Injectable} from '@angular/core';\n\nexport interface DateTimePickerInterface {\n  minDate: Date;\n  maxDate: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DatePickerService implements DateTimePickerInterface {\n  minDate = new Date();\n  maxDate = new Date();\n  constructor() {\n    this.minDate.setFullYear(this.minDate.getFullYear() - 100);\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 18);\n  }\n}\n","import {Injectable} from '@angular/core';\n\ninterface UserServiceInterface {\n  user: {\n    id: number,\n    name: string,\n    surname: string,\n    date: string,\n    email: string,\n    password: string\n  };\n}\n\nconst users = [\n  {id: 1, name: 'Vasia', surname: 'Pupkin', password: '111', date: '12/03/1965', email: 'vasia@gmail.com'},\n  {id: 2, name: 'Sveta', surname: 'Zajcew', password: '111', date: '13/01/1961', email: 'sveta@gmail.com'},\n  {id: 3, name: 'Chmo', surname: 'Moiseew', password: '111', date: '18/03/1962', email: 'chmo@gmail.com'},\n  {id: 4, name: 'Lola', surname: 'Porosh', password: '111', date: '25/12/1994', email: 'lola@gmail.com'},\n  {id: 5, name: 'Doll', surname: 'Timosh', password: '111', date: '16/05/1981', email: 'doll@gmail.com'},\n  {id: 6, name: 'Mr', surname: 'Azarow', password: '111', date: '22/08/1985', email: 'mr@gmail.com'},\n  {id: 7, name: 'Wowa', surname: 'Trish', password: '111', date: '21/03/1993', email: 'wowa@gmail.com'},\n  {id: 8, name: 'Kon', surname: 'Nikol', password: '111', date: '14/01/1997', email: 'kon@gmail.com'},\n  {id: 9, name: 'Rock', surname: 'Yos', password: '111', date: '4/04/1996', email: 'rock@gmail.com'}\n];\n\n@Injectable()\nexport class UserService implements UserServiceInterface {\n\n  private isUserLoggedIn;\n  public user: {\n    id: number,\n    name: string,\n    surname: string,\n    date: string,\n    email: string,\n    password: string\n  };\n\n  constructor() {\n    this.isUserLoggedIn = false;\n  }\n\n  setDefaultUsers() {\n    if (JSON.parse(localStorage.getItem('users')) == null) {\n      localStorage.setItem('users', JSON.stringify(users));\n    }\n  }\n\n  pushUserToLocalStorage(user) {\n    const _users = JSON.parse(localStorage.getItem('users'));\n    user.id = _users[_users.length - 1].id + 1;\n    _users.push(user);\n    localStorage.setItem('users', JSON.stringify(_users));\n    this.setUserLoggedIn(user);\n  }\n\n  setUserLoggedIn(_user) {\n    this.isUserLoggedIn = true;\n    this.user = _user;\n  }\n\n  getUserLoggedIn() {\n    return this.user;\n  }\n\n  logOut() {\n    return this.isUserLoggedIn = false;\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\nexport interface FormValidationInterface {\n  email: FormControl;\n  text_field: FormControl;\n  getEmailErrorMessage: Function;\n  getEmptyFieldErrorMessage: Function;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormValidationService implements FormValidationInterface {\n  email = new FormControl('', [Validators.required, Validators.email]);\n  text_field = new FormControl('', Validators.required);\n  _text_field = new FormControl('', Validators.required);\n\n  getEmailErrorMessage() {\n    return this.email.hasError('required') ? 'You must enter a value' :\n      this.email.hasError('email') ? 'Not a valid email' :\n        '';\n  }\n\n  getEmptyFieldErrorMessage() {\n    return this.text_field.hasError('required') ? 'You must enter a value' : '';\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimerComponent } from './timer/timer.component';\r\nimport {MaterialModule} from '../material.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule\r\n  ],\r\n  declarations: [TimerComponent],\r\n  exports: [\r\n    TimerComponent\r\n  ]\r\n})\r\nexport class TimerModule { }\r\n","module.exports = \"<mat-card class=\\\"card\\\">\\r\\n  <mat-card-header>\\r\\n    <mat-card-title><h3>Timer</h3></mat-card-title>\\r\\n    <mat-card-subtitle><h4>Use it wisely</h4></mat-card-subtitle>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n    <mat-form-field class=\\\"field-full-width\\\" style=\\\"width: 50px; text-align: right; margin-right: 5px\\\">\\r\\n      <input matInput [value]=\\\"default_time\\\" #sec type=\\\"number\\\">\\r\\n    </mat-form-field>\\r\\n    <span>s</span>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"timer('start', sec)\\\" *ngIf=\\\"!hide\\\">Start</button>\\r\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"timer('stop', sec)\\\" *ngIf=\\\"hide\\\">Stop</button>\\r\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"timer('reset', sec)\\\">Reset</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card {\\n  max-width: 300px;\\n  margin-top: 10px;\\n  margin-bottom: 10px; }\\n\"","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-timer',\r\n  templateUrl: './timer.component.html',\r\n  styleUrls: ['./timer.component.scss']\r\n})\r\nexport class TimerComponent implements OnInit {\r\n  default_time = 10;\r\n  hide = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  myVar;\r\n\r\n  myStopFunction() {\r\n    clearInterval(this.myVar);\r\n  }\r\n\r\n  timer(command, timeInput) {\r\n    if (command === 'start') {\r\n      this.hide = true;\r\n      this.myVar = setInterval(function () {\r\n        myTimer(timeInput);\r\n      }, 1000);\r\n    } else if (command === 'stop') {\r\n      this.hide = false;\r\n      this.myStopFunction();\r\n    } else if (command === 'reset') {\r\n      this.hide = false;\r\n      this.myStopFunction();\r\n      timeInput.value = this.default_time;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n\r\nfunction myTimer(timeInput) {\r\n  let time = timeInput.value;\r\n  time = time - 1;\r\n  if (time >= 0) {\r\n    timeInput.value = time;\r\n  } else {\r\n    this.myStopFunction();\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}